# System & Process Management Commands  
**Date:** 2025-05-18  
**Checkpoint:** Daily Linux Roadmap - Day 6 

---

## 1. What I Learned

### `systemctl` â€“ Manage systemd services  
- `systemctl start|stop|status <servicename>.service`  
- `systemctl enable|disable <servicename>.service`  
- `systemctl restart|reload <servicename>.service`  
- `systemctl list-units --all`  
  - **Output columns:** UNIT, LOAD, ACTIVE, SUB, DESCRIPTION

---

### `firewalld` â€“ Firewall service management  
- Enable: `systemctl enable firewalld`  
- Disable: `systemctl disable firewalld`  
- Check status: `systemctl status firewalld`  

---

### `ps` â€“ Process status  
- `ps` â†’ Shows current shell processes  
- `ps -e` â†’ Shows all running processes  
- `ps aux` â†’ BSD format  
- `ps -ef` â†’ Full format (commonly used)  
- `ps -u <username>` â†’ Shows all processes by a user  
- **Columns:** PID, TTY, TIME, CMD  

---

### `top` â€“ Real-time process viewer  
- `top` â†’ Shows live system usage (refreshes every 3 seconds)  
- Press `c` â†’ Show full command path  
- Press `k` â†’ Kill process by PID  
- Press `M` â†’ Sort by memory usage  
- Press `P` â†’ Sort by CPU usage  
- `top -u <username>` â†’ Filter processes by user  

---

### `kill` â€“ Terminate processes manually  
- Syntax: `kill [OPTION] [PID]`  
- `kill -l` â†’ List all signals  

**Most common signals:**  
- `kill -1` â†’ Restart process  
- `kill -2` â†’ Interrupt (like Ctrl+C)  
- `kill -9` â†’ Force kill  
- `kill -15` â†’ Graceful termination  

**Other commands:**  
- `killall <name>` â†’ Kill by name  
- `pkill <name>` â†’ Kill by pattern  

---

## 2. Questions I Had  
- When should I use `kill -9` vs `kill -15`?  
- What does each column in `top` mean concerning performance?  
- Can I use a script to monitor and restart a service automatically?

---

## 3. How Things Connected  
- **Everything in Linux is a process**: scripts, services, daemons.  
- `systemctl` handles services, which are background processes.  
- `top` and `ps` help diagnose performance issues and bottlenecks.  
- `kill`, `killall`, and `pkill` are tools for manual intervention.  
- Mastering these makes you effective at monitoring and troubleshooting production systems.

---

## 4. What I Need to Try Next (Hands-On Practice)

ðŸ›  **Practice Scenarios:**
1. Start and stop the `firewalld` service. Check its status.
2. Use `ps -ef` to find your terminalâ€™s shell PID.
3. Launch a background process: `sleep 1000 &`, then find and kill it using `kill`.
4. Use `top`, press `M`, `P`, `k`, and `c` to explore process details.
5. Use `pkill` and `killall` to terminate the same test process.

---

## 5. Real-World Application / Use Case  
- Restart stuck services or kill runaway processes on production servers.  
- Use `top` and `ps` to track memory or CPU hogs.  
- Build scripts for auto-restarting critical services using these commands.  
- Prepares you for real-world SysAdmin/DevOps environments and job interviews.
